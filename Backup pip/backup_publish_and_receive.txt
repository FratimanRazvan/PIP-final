package test.test;
import java.awt.EventQueue;
import java.awt.TextArea;

import javax.swing.*; 
import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Puternic implements MqttCallback{

	private JFrame frame;
	private MqttClient sampleClient;
	private String topic = "PrimariaOradea";
	private int qos = 0;
	private int received = 0;
	private JTextField Message;
	
	public Puternic(String clientId) {
		String broker = "tcp://broker.hivemq.com:1883";
		//      
		MqttClientPersistence persistence = new MemoryPersistence();

		try {
			sampleClient = new MqttClient(broker, clientId, persistence);
			MqttConnectOptions connOpts = new MqttConnectOptions();
			connOpts.setCleanSession(false);
			sampleClient.setCallback(this);

			System.out.println("Connecting to broker: " + broker);
			IMqttToken tok = sampleClient.connectWithResult(connOpts);
			System.out.println("Connected sessionPresent:" + tok.getSessionPresent() + " complete:" + tok.isComplete());

		} catch (MqttException me) {
			System.out.println("reason " + me.getReasonCode());
			System.out.println("msg " + me.getMessage());
			System.out.println("loc " + me.getLocalizedMessage());
			System.out.println("cause " + me.getCause());
			System.out.println("excep " + me);
			me.printStackTrace();
		}
	}

	public void close() throws MqttException {
		sampleClient.disconnect();
		System.out.println("Disconnected\n");
	}

	private void subscribe() throws MqttException {
		sampleClient.subscribe(topic, qos);
	}

//	private void send() throws MqttException {
//
//		send();
//		System.out.println("Message published");
//	}

	public static void sleep(int ms) {
		try {
			Thread.sleep(ms);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	private void send(String msg) throws MqttException {
		//System.out.println(msg);                  
		MqttMessage message = new MqttMessage(msg.getBytes());
		message.setQos(qos);
		sampleClient.publish(topic, message);
	}

	@Override
	public void connectionLost(Throwable cause) {
		System.out.println("lost connection");
	}

	@Override
	public synchronized void messageArrived(String topic, MqttMessage message) throws Exception {
		System.out.println(message);
		received();
	}

	
	@Override
	public void deliveryComplete(IMqttDeliveryToken token) {
		System.out.println("delivery complete");
	}

	private synchronized void waitFor(int nr) throws InterruptedException {
		do {
			System.out.println("waitFor:" + nr + " received:" + received);
			wait();
			if (received >= nr) {
				System.out.println("waitFor ret received:" + received);
				return;
			}
		} while (true);
	}

	private synchronized void received() {
		received++;
		notifyAll();
	}
	
	public class CustomOutputStream extends OutputStream {
	    private JTextArea textArea;

	    public CustomOutputStream(JTextArea textArea) {
	        this.textArea = textArea;
	    }

	    @Override
	    public void write(int b) throws IOException {
	        // redirects data to the text area
	        textArea.append(String.valueOf((char)b));
	        // scrolls the text area to the end of data
	        textArea.setCaretPosition(textArea.getDocument().getLength());
	        // keeps the textArea up to date
	        textArea.update(textArea.getGraphics());
	    }
	}
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Puternic window = new Puternic();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
//		try {
//		Puternic client;
//		client = new Puternic("Gherman");
//		client.send();
//		client.subscribe();
//		client.waitFor(100);
//		client.close();
//		}catch(Exception e) {
//			System.out.println("exceptie");
//		}
	}

	/**
	 * Create the application.
	 */
	public Puternic() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 1022, 543);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		final JTextArea Chatlog = new JTextArea();
		Chatlog.setText("ChatLog..");
		Chatlog.setEditable(false);;
		Chatlog.setBounds(40, 204, 790, 292);
		frame.getContentPane().add(Chatlog);
		PrintStream printStream = new PrintStream(new CustomOutputStream(Chatlog));
		System.setOut(printStream);
		System.setErr(printStream);
		
		
		
		Message = new JTextField();
		Message.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				Message.setText(null);
			}
			@Override
			public void mouseEntered(MouseEvent e) {
				Message.setText(null);
			}
		});
		Message.setText("Enter Message..");
		Message.setBounds(40, 174, 695, 20);
		frame.getContentPane().add(Message);
		
//Butoane
		
		JButton Publish = new JButton("Publish");
		Publish.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				try {
					Puternic client;
					client = new Puternic("Gherman");
					client.send("Gherman: "+Message.getText());
					
					}catch(Exception exceptie) {
						System.out.println("exceptie");
					}
				
			}
		});
		Publish.setBounds(745, 173, 85, 21);
		frame.getContentPane().add(Publish);
		
		
		Message.setColumns(10);
		
		
	}

}
	
      

	


